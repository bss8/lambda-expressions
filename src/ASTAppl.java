/* Generated By:JJTree: Do not edit this line. ASTAppl.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.*;

public
class ASTAppl extends SimpleNode {
  public ASTAppl(int id) {
    super(id);
  }

  public ASTAppl(Prog3 p, int id) {
    super(p, id);
  }

  public String printExpr() {
	  StringBuilder str = new StringBuilder(20);
	  str.append("(");
	  if (children != null) {
		  for (int i = 0; i < children.length; ++i) {
			SimpleNode n = (SimpleNode)children[i];
			if (n != null) {
			  str.append(n.printExpr());
			  if(i == 0) str.append(" ");
			}
		  }
	  }
	  return str + ")";
  }
  
  public Set<String> freeVars() {
	  Set<String> hash = new HashSet<>();
	  if (children != null) {
		  for (Node child : children) {
			  SimpleNode n = (SimpleNode) child;
			  if (n != null) {
				  hash.addAll(n.freeVars());
			  }
		  }
	  }
	  return hash;
  }

  public SimpleNode substitute(String var, SimpleNode expr){
	for (int i = 0; i < children.length; ++i) {
		SimpleNode n = (SimpleNode)children[i];
		if(n.toString().equals(var)){
			children[i] = expr;
		}
		else if(n.toString().equals("Appl") || n.toString().equals("Lambda")){
			Node tmp = n.substitute(var, expr);
			children[i] = tmp;
		}
	}
	return this;
  }
  
  public SimpleNode application(String var, SimpleNode expr){
	if (children != null) {
		for (int i = 0; i < children.length; ++i) {
			SimpleNode n = (SimpleNode)children[i];
			if (n != null){
				if(n.toString().equals(var)) {
					children[i] = expr;
				}
				else if(n.toString().equals("Appl") || n.toString().equals("Lambda")){
					children[i] = n.application(var, expr);
				}
			}
		  }
	  }
	return this;
  }

  public SimpleNode normalOrderEvaluate(){
	  if (children != null) {
			Node[] n = children;
			if(n[0] == null && n[1] == null) return this;
			if ("Lambda".equals(n[0].toString()) && n[1] != null) return beta_redux((ASTLambda)n[0], (SimpleNode)n[1]);
			if ("Appl".equals(n[0].toString()) && ((SimpleNode)n[1]).children == null){
				n[0] = ((ASTAppl)n[0]).normalOrderEvaluate();
				String op = ((SimpleNode)((SimpleNode)n[0]).children[0]).printExpr();
				String v1 = ((SimpleNode)n[0]).children[1].toString();
				String v2 = n[1].toString();
				if(isOperator(op) && isInteger(v1) && isInteger(v2)){
					((ASTconstant)((SimpleNode)n[0]).children[0]).set(delta_redux(op, v1, v2));
					return (SimpleNode)((SimpleNode)n[0]).children[0];
				}
			}
			if (n[1] != null && ("Appl".equals(n[1].toString()) || "Lambda".equals(n[1].toString()))) n[1] = ((SimpleNode)n[1]).normalOrderEvaluate();
	  }
      return this;
  }
}
/* JavaCC - OriginalChecksum=184736a6319e09e036ab6c1e4261efd8 (do not edit this line) */
