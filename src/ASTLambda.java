/* Generated By:JJTree: Do not edit this line. ASTLambda.java Version 7.0.5 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

import java.util.*;

public
class ASTLambda extends SimpleNode {

    public ASTLambda(int id) {
        super(id);
    }

    public ASTLambda(Prog3 p, int id) {
        super(p, id);
    }

    @Override
    public String printExpr() {
        StringBuilder str = new StringBuilder(30);
        str.append("(L ");

        if (children.length > 0) {
            SimpleNode node = (SimpleNode) children[0];
            if (node != null) {
                str.append(node.printExpr()).append(" . ");
            }
            node = (SimpleNode) children[1];
            if (node != null) {
                str.append(node.printExpr());
            }
        }
        return str.toString() + ")";
    }

    @Override
    public Set<String> freeVars() {
        Set<String> hashSet = new HashSet<>();
        String boundVar = "";
        if (children != null) {
            for (int i = 0; i < children.length; i++) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    if (i == 0) boundVar = n.toString();
                    hashSet.addAll(n.freeVars());
                }
            }
        }
        hashSet.remove(boundVar);
        return hashSet;
    }

    @Override
    public SimpleNode substitute(String varToSubstitute, SimpleNode expression) {
        SimpleNode firstNode = (SimpleNode) children[0];
        SimpleNode secondNode = (SimpleNode) children[1];

        if (!varToSubstitute.equals(firstNode.toString())) {
            if ("Appl".equals(secondNode.toString()) || "Lambda".equals(secondNode.toString())) {
                Node tmp = secondNode.substitute(varToSubstitute, expression);
                children[1] = tmp;
            } else if (varToSubstitute.equals(secondNode.toString())) {
                children[1] = expression;
            }
        }
        return this;
    }

    @Override
    public SimpleNode application(String var, SimpleNode expr) {
        // TODO
        return this;
    }

    @Override
    public SimpleNode normalOrderEvaluation() {
        // TODO
        return this;
    }
}
/* JavaCC - OriginalChecksum=c7618396204cd96566368c50a49622ab (do not edit this line) */
