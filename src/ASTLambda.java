/* Generated By:JJTree: Do not edit this line. ASTLambda.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.*;

public
class ASTLambda extends SimpleNode {
  
  public ASTLambda(int id) {
    super(id);
  }

  public ASTLambda(Prog3 p, int id) {
    super(p, id);
  }

  public String printExpr() {
	  StringBuilder str = new StringBuilder(20);
			 str.append("(L ");
	  if (children != null && children.length > 0) {
			SimpleNode n = (SimpleNode) children[0];
			if (n != null) {
			  str.append(n.printExpr()).append(" . ");
			}
			n = (SimpleNode) children[1];
			if (n != null) {
			  str.append(n.printExpr());
			}
	  }
	  return str.toString() + ")";
  }
  
  public Set<String> freeVars() {
	  Set<String> hash = new HashSet<>();
	  String bound = "";
	  if (children != null) {
		  for (int i = 0; i < children.length; ++i) {
			SimpleNode n = (SimpleNode)children[i];
			if (n != null) {
				if(i == 0) bound = n.toString();
				hash.addAll(n.freeVars());
			}
		  }
	  }
	  hash.remove(bound);
	  return hash;
  }

  public SimpleNode substitute(String var, SimpleNode expr){
	SimpleNode n = (SimpleNode)children[0];
	SimpleNode m = (SimpleNode)children[1];
	if (!n.toString().equals(var)){
		if(m.toString() == "Appl" || m.toString() == "Lambda") {
			Node tmp = m.substitute(var, expr);
			children[1] = tmp;
		}
		else if(m.toString() == var) {
			children[1] = expr;
		}
	}
	return this;
  }

  public SimpleNode application(String var, SimpleNode expr){
	if (children != null) {
		SimpleNode n = (SimpleNode)children[0];
		SimpleNode m = (SimpleNode)children[1];
		if (n != null && m != null){
			if(m.toString() == "Appl" || m.toString() == "Lambda") children[1] = m.application(var, expr);
			else if(m.toString() == var) children[1] = expr;
	    }
	}
	return this;
  }
  
	public SimpleNode normalOrderEvaluate(){
		if (children != null) {
			SimpleNode[] n = (SimpleNode[])children;
			for (int i = 1; i < n.length; ++i) {
				if (n[i] != null) {
				  if(n[i].toString() == "Appl" || n[i].toString() == "Lambda"){
					  n[i] = n[i].normalOrderEvaluate();
				  }
				}
			}
		}
		return this;
    }
}
/* JavaCC - OriginalChecksum=c7618396204cd96566368c50a49622ab (do not edit this line) */
