/* Generated By:JJTree: Do not edit this line. ASTStart.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTStart extends SimpleNode {
    public ASTStart(int id) {
        super(id);
    }

    public ASTStart(Prog3 p, int id) {
        super(p, id);
    }

    public SimpleNode substitute(String var, SimpleNode expr) {
        expr.dump("");
        System.out.println("");
        String x = children[0].toString();
        System.out.println(x);
        if (x == "Lambda") {
            return ((ASTLambda) children[0]).substitute(var, expr);
        } else if (x == "Appl") {
            return ((ASTAppl) children[0]).substitute(var, expr);
        } else if (x == var) {
            return expr;
        }
        return this;
    }

    public SimpleNode normalOrderEvaluate() {
        if (children == null) return this;
        Node[] n = (Node[]) children;
        for (int i = 0; i < children.length; ++i) {
            if (n[i] != null) {
                if (n[i].toString() == "Appl") {
                    n[i] = (Node) ((ASTAppl) n[i]).normalOrderEvaluate();
                } else if (n[i].toString() == "Lambda") {
                    return ((SimpleNode) n[i]).normalOrderEvaluate();
                } else return (SimpleNode) n[i];
            }
        }
        return this;
    }

    public String toString(String prefix) {
        return "";
    }

    public String toString() {
        return "";
    }

    public String printExpr() {
        StringBuilder str = new StringBuilder(20);
        if (children != null) {
            for (Node child : children) {
                SimpleNode n = (SimpleNode) child;
                if (n != null) {
                    str.append(n.printExpr());
                }
            }
        }
        return str.toString();
    }

    public void dump(String prefix) {
        if (children != null) {
			for (Node child : children) {
				SimpleNode n = (SimpleNode) child;
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
        }
    }

    public void dumpFV(String prefix) {
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dumpFV(prefix + " ");
                }
            }
        }
    }
}
/* JavaCC - OriginalChecksum=42c3ebedfed11913df326306f2137d61 (do not edit this line) */
